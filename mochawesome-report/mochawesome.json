{
  "stats": {
    "suites": 6,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2022-03-29T13:22:53.152Z",
    "end": "2022-03-29T13:22:54.259Z",
    "duration": 1107,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2f8dc0e8-c4ab-461d-a1f1-961a3d8b5182",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f5df2539-19aa-4743-a30e-0f5164d6b035",
          "title": "VALID TEST SCENARIOS",
          "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
          "file": "/OrderFlow/test/orderflow.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "33e74289-84b7-452f-9c3e-fa63cace87a7",
              "title": "CREATE AND COMPLETE ORDER",
              "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
              "file": "/OrderFlow/test/orderflow.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST/ Order is CREATED",
                  "fullTitle": "VALID TEST SCENARIOS CREATE AND COMPLETE ORDER POST/ Order is CREATED",
                  "timedOut": false,
                  "duration": 442,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data ={\n       \n           stops: [\n               {\n                   \"lat\": 22.344674, \"lng\": 114.124651\n               },\n               {\n                   \"lat\": 22.375384, \"lng\": 114.182446\n               },\n               {\n                   \"lat\": 22.385669, \"lng\": 114.186962\n               }\n           \n           ]\n       }\n      return request\n      .post('orders')\n      .send(data)\n      .then((res)=>{\n           expect (res.status).is.equal(201);\n           expect (res.body.id).is.not.null;\n           expect (res.body.drivingDistance).is.not.null;\n           expect (res.body.fare.amount).is.not.null;\n           expect (res.body.fare.currency).is.not.null;\n           orderData.orderid = res.body.id;\n           orderData.drivingDistance = res.body.drivingDistancesInMeters;\n           orderData.amount = res.body.fare.amount;\n           orderData.currency = res.body.fare.currency;\n           \n      });",
                  "err": {},
                  "uuid": "a4979500-9a8e-47b6-80c4-4e472dac1a87",
                  "parentUUID": "33e74289-84b7-452f-9c3e-fa63cace87a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET/ Order is ASSIGNED",
                  "fullTitle": "VALID TEST SCENARIOS CREATE AND COMPLETE ORDER GET/ Order is ASSIGNED",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .get(`orders/${orderData.orderid}`)\n       .then((res)=>{\n            expect (res.status).is.equal(200);\n            expect (res.body.id).is.equal(orderData.orderid);\n           \n           for (var distanceParams = 0;distanceParams<orderData.drivingDistance.length;distanceParams++){\n               expect (res.body.drivingDistancesInMeters[distanceParams]).is.equal(orderData.drivingDistance[distanceParams]);\n           }\n           \n            expect (res.body.fare.amount).is.equal(orderData.amount);\n            expect (res.body.fare.currency).is.equal(orderData.currency)\n            expect (res.body.status).is.equal (\"ASSIGNING\");\n           \n            orderData.createdDate = res.body.createdTime;\n            orderData.orderDate = res.body.orderDateTime;\n           expect (faresIsEqual()).to.be.true;\n            \n       });",
                  "err": {},
                  "uuid": "302b24c7-44ea-4740-ab5f-1c842f1d00f8",
                  "parentUUID": "33e74289-84b7-452f-9c3e-fa63cace87a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT/ Order is ONGOING",
                  "fullTitle": "VALID TEST SCENARIOS CREATE AND COMPLETE ORDER PUT/ Order is ONGOING",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .put(`orders/${orderData.orderid}/take`)\n       .then((res)=>{\n           expect (res.status).is.equal(200);\n           expect (res.body.id).is.equal(orderData.orderid);\n           expect (res.body.status).is.equal(\"ONGOING\");\n           expect (res.body.ongoingTime).is.not.null;\n            \n       });",
                  "err": {},
                  "uuid": "e3983ed2-1e39-4810-bbff-8848eede582e",
                  "parentUUID": "33e74289-84b7-452f-9c3e-fa63cace87a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT/ Order is COMPLETED ",
                  "fullTitle": "VALID TEST SCENARIOS CREATE AND COMPLETE ORDER PUT/ Order is COMPLETED ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .put(`orders/${orderData.orderid}/complete`)\n       .then((res)=>{\n           expect (res.status).is.equal(200);\n           expect (res.body.id).is.equal(orderData.orderid);\n           expect (res.body.status).is.equal(\"COMPLETED\");\n           expect (res.body.completedAt).is.not.null;\n            \n       });",
                  "err": {},
                  "uuid": "9b1a6d5d-ca44-4f48-b241-4af8a972e89b",
                  "parentUUID": "33e74289-84b7-452f-9c3e-fa63cace87a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4979500-9a8e-47b6-80c4-4e472dac1a87",
                "302b24c7-44ea-4740-ab5f-1c842f1d00f8",
                "e3983ed2-1e39-4810-bbff-8848eede582e",
                "9b1a6d5d-ca44-4f48-b241-4af8a972e89b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 497,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39c9f581-294f-4438-9166-61f105f9fb74",
              "title": "CANCELLED the ASSIGNED order",
              "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
              "file": "/OrderFlow/test/orderflow.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST/ Order is CREATED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ASSIGNED order POST/ Order is CREATED",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data ={\n        stops: [\n            {\n                \"lat\": 22.344674, \"lng\": 114.124651\n            },\n            {\n                \"lat\": 22.375384, \"lng\": 114.182446\n            },\n            \n        ]\n       }\n\n       return request\n       .post('orders')\n       .send(data)\n       .then((res)=>{\n\n            expect (res.status).is.equal(201);\n            expect (res.body.id).is.not.null;\n           \n            orderData.orderid = res.body.id;\n            \n       });",
                  "err": {},
                  "uuid": "f6f9d9b9-ea23-4426-8b3f-34d77a9f0d13",
                  "parentUUID": "39c9f581-294f-4438-9166-61f105f9fb74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET/ Order is ASSIGNED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ASSIGNED order GET/ Order is ASSIGNED",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .get(`orders/${orderData.orderid}`)\n       .then((res)=>{\n            expect (res.status).is.equal(200);\n            expect (res.body.id).is.equal(orderData.orderid);\n            expect (res.body.status).is.equal (\"ASSIGNING\");\n            \n       });",
                  "err": {},
                  "uuid": "753bd43b-8e06-4644-b4a8-3e7455308451",
                  "parentUUID": "39c9f581-294f-4438-9166-61f105f9fb74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT/ Order is ASSIGNED-->CANCELLED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ASSIGNED order PUT/ Order is ASSIGNED-->CANCELLED",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .put(`orders/${orderData.orderid}/cancel`)\n       .then((res)=>{\n            expect (res.status).is.equal(200);\n            expect (res.body.id).is.equal(orderData.orderid);\n            expect (res.body.status).is.equal (\"CANCELLED\");\n            expect (res.body.cancelledAt).is.not.null;\n            \n       });",
                  "err": {},
                  "uuid": "8b4471b3-0b27-477b-bfb0-4b6999ca1618",
                  "parentUUID": "39c9f581-294f-4438-9166-61f105f9fb74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6f9d9b9-ea23-4426-8b3f-34d77a9f0d13",
                "753bd43b-8e06-4644-b4a8-3e7455308451",
                "8b4471b3-0b27-477b-bfb0-4b6999ca1618"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 157,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67d476ae-4d40-4833-aa0f-f7216ea65016",
              "title": "CANCELLED the ONGOING order",
              "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
              "file": "/OrderFlow/test/orderflow.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "POST/ Order is CREATED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ONGOING order POST/ Order is CREATED",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data ={\n        stops: [\n           {\n               \"lat\": 22.344674, \"lng\": 114.124651\n           },\n           {\n               \"lat\": 22.375384, \"lng\": 114.182446\n           },\n            \n        ]\n       }\n\n       return request\n       .post('orders')\n       .send(data)\n       .then((res)=>{\n\n            expect (res.status).is.equal(201);\n            expect (res.body.id).is.not.null;\n           \n            orderData.orderid = res.body.id;\n            \n       });",
                  "err": {},
                  "uuid": "464178b4-6b67-47fd-9c23-058dbaef107b",
                  "parentUUID": "67d476ae-4d40-4833-aa0f-f7216ea65016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GET/ Order is ASSIGNED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ONGOING order GET/ Order is ASSIGNED",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .get(`orders/${orderData.orderid}`)\n       .then((res)=>{\n            expect (res.status).is.equal(200);\n            expect (res.body.id).is.equal(orderData.orderid);\n            expect (res.body.status).is.equal (\"ASSIGNING\");\n            \n       });",
                  "err": {},
                  "uuid": "907f4eb2-46b0-4d39-930d-91cf12c31311",
                  "parentUUID": "67d476ae-4d40-4833-aa0f-f7216ea65016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT/ Order is ONGOING",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ONGOING order PUT/ Order is ONGOING",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .put(`orders/${orderData.orderid}/take`)\n       .then((res)=>{\n           expect (res.status).is.equal(200);\n           expect (res.body.id).is.equal(orderData.orderid);\n           expect (res.body.status).is.equal(\"ONGOING\");\n           expect (res.body.ongoingTime).is.not.null;\n            \n       });",
                  "err": {},
                  "uuid": "7f43fb1a-e75e-4604-b6c5-99b86ac62b48",
                  "parentUUID": "67d476ae-4d40-4833-aa0f-f7216ea65016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "PUT/ Order is ONGOING->CANCELLED",
                  "fullTitle": "VALID TEST SCENARIOS CANCELLED the ONGOING order PUT/ Order is ONGOING->CANCELLED",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return request\n       .put(`orders/${orderData.orderid}/cancel`)\n       .then((res)=>{\n            expect (res.status).is.equal(200);\n            expect (res.body.id).is.equal(orderData.orderid);\n            expect (res.body.status).is.equal (\"CANCELLED\");\n            expect (res.body.cancelledAt).is.not.null;\n            \n       });",
                  "err": {},
                  "uuid": "fb03d72c-56a1-49c9-a156-7cca8a0da1c9",
                  "parentUUID": "67d476ae-4d40-4833-aa0f-f7216ea65016",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "464178b4-6b67-47fd-9c23-058dbaef107b",
                "907f4eb2-46b0-4d39-930d-91cf12c31311",
                "7f43fb1a-e75e-4604-b6c5-99b86ac62b48",
                "fb03d72c-56a1-49c9-a156-7cca8a0da1c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8884fcf9-cbca-48cc-8f8e-fa2ab8d34dd2",
          "title": "CREATE ADVANCE ORDER",
          "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
          "file": "/OrderFlow/test/orderflow.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST/ Order is CREATED",
              "fullTitle": "CREATE ADVANCE ORDER POST/ Order is CREATED",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data ={\n    orderAt: advanceDate,\n    stops: [\n       {\n           \"lat\": 22.344674, \"lng\": 114.124651\n       },\n       {\n           \"lat\": 22.375384, \"lng\": 114.182446\n       },\n        \n    ]\n   }\n    \n   return request\n   .post('orders')\n   .send(data)\n   .then((res)=>{\n    \n    expect (res.status).is.equal(201);\n    expect (res.body.id).is.not.null;\n    expect (res.body.drivingDistance).is.not.null;\n    expect (res.body.fare.amount).is.not.null;\n    expect (res.body.fare.currency).is.not.null;\n    orderData.orderid = res.body.id;\n    orderData.drivingDistance = res.body.drivingDistancesInMeters;\n    orderData.amount = res.body.fare.amount;\n    orderData.currency = res.body.fare.currency;\n        \n   });",
              "err": {},
              "uuid": "322212b8-6987-4a5b-a8a4-d015b61272fc",
              "parentUUID": "8884fcf9-cbca-48cc-8f8e-fa2ab8d34dd2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/ Order is ASSIGNED",
              "fullTitle": "CREATE ADVANCE ORDER GET/ Order is ASSIGNED",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request\n           .get(`orders/${orderData.orderid}`)\n           .then((res)=>{\n   \n                expect (res.status).is.equal(200);\n                expect (res.body.id).is.equal(orderData.orderid);\n               \n               for (var distanceParams = 0;distanceParams<orderData.drivingDistance.length;distanceParams++){\n                   expect (res.body.drivingDistancesInMeters[distanceParams]).is.equal(orderData.drivingDistance[distanceParams]);\n               }\n               \n                expect (res.body.fare.amount).is.equal(orderData.amount);\n                expect (res.body.fare.currency).is.equal(orderData.currency)\n                expect (res.body.status).is.equal (\"ASSIGNING\");\n               \n                orderData.createdDate = res.body.createdTime;\n                orderData.orderDate = res.body.orderDateTime;\n   \n               expect (faresIsEqual()).to.be.true;\n                \n           });",
              "err": {},
              "uuid": "524215b5-19a3-4f84-9821-fdedeca2bd43",
              "parentUUID": "8884fcf9-cbca-48cc-8f8e-fa2ab8d34dd2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "322212b8-6987-4a5b-a8a4-d015b61272fc",
            "524215b5-19a3-4f84-9821-fdedeca2bd43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 80,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
          "title": "ERROR CASES/ INVALID SCENARIOS",
          "fullFile": "/Users/amitgoriwale/Documents/TestCode/order-api/OrderFlow/test/orderflow.js",
          "file": "/OrderFlow/test/orderflow.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST/ Back dated order should not created",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS POST/ Back dated order should not created",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data ={\n    orderAt: \"2020-04-01T15:00:00.000Z\",\n    stops: [\n       {\n           \"lat\": 22.344674, \"lng\": 114.124651\n       },\n       {\n           \"lat\": 22.375384, \"lng\": 114.182446\n       },\n        \n    ]\n   }\n    \n   return request\n   .post('orders')\n   .send(data)\n   .then((res)=>{\n    \n    expect (res.status).is.equal(400);\n    expect (res.body.message).is.equal (\"field orderAt is behind the present time\");\n        \n   });",
              "err": {},
              "uuid": "465a388a-b0ec-4a98-9554-329cf4b508c8",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST/ Order should not create without lat and lng coordinates",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS POST/ Order should not create without lat and lng coordinates",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data ={\n               stops: [\n                   \n               ]\n              }\n       \n              return request\n              .post('orders')\n              .send(data)\n              .then((res)=>{\n       \n               expect (res.status).is.equal(400);\n                   \n              });",
              "err": {},
              "uuid": "5bc1529c-9676-4347-8199-f68d360c52c8",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST/ Validate behaviour with same coordinated of lat and lang",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS POST/ Validate behaviour with same coordinated of lat and lang",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data ={\n                   stops: [\n                       {\n                           \"lat\": 22.385669, \"lng\": 114.186962\n                       },\n                       {\n                           \"lat\": 22.385669, \"lng\": 114.186962\n                       },\n                       {\n                           \"lat\": 22.385669, \"lng\": 114.186962\n                       }                \n                   ]\n                  }\n           \n                  return request\n                  .post('orders')\n                  .send(data)\n                  .then((res)=>{\n           \n                   expect (res.status).is.equal(201);\n                       \n                  });",
              "err": {},
              "uuid": "68caeb7d-cd68-45ac-8c8f-73d8a48cb795",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET/ 404 for invalid order id while getting Assign order",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS GET/ 404 for invalid order id while getting Assign order",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request\n               .get(`orders/-1`)\n               .then((res)=>{\n       \n                    expect (res.status).is.equal(404);\n                    \n               });",
              "err": {},
              "uuid": "a5541b95-a684-4a35-9971-28f044349823",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT/ 404 for invalid Order id while take order",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS PUT/ 404 for invalid Order id while take order",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request\n               .put(`orders/-2/take`)\n               .then((res)=>{\n       \n                   expect (res.status).is.equal(404);\n                    \n               });",
              "err": {},
              "uuid": "ae00a1aa-7abe-4996-9c23-a16d02d5e5ce",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT/ 404 for invalid Order id while complete order",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS PUT/ 404 for invalid Order id while complete order",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request\n               .put(`orders/-2/complete`)\n               .then((res)=>{\n       \n                   expect (res.status).is.equal(404);\n                    \n               });",
              "err": {},
              "uuid": "5564264d-b83b-469d-a42c-17cfc7b06727",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT/ 404 for invalid Order id while cancel order",
              "fullTitle": "ERROR CASES/ INVALID SCENARIOS PUT/ 404 for invalid Order id while cancel order",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return request\n               .put(`orders/-2/cancel`)\n               .then((res)=>{\n       \n                   expect (res.status).is.equal(404);\n                    \n               });",
              "err": {},
              "uuid": "8f6672c5-fa21-42b3-96e2-0d132553f1b7",
              "parentUUID": "5b06bd6b-f26e-481b-b654-12e8f103e9fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "465a388a-b0ec-4a98-9554-329cf4b508c8",
            "5bc1529c-9676-4347-8199-f68d360c52c8",
            "68caeb7d-cd68-45ac-8c8f-73d8a48cb795",
            "a5541b95-a684-4a35-9971-28f044349823",
            "ae00a1aa-7abe-4996-9c23-a16d02d5e5ce",
            "5564264d-b83b-469d-a42c-17cfc7b06727",
            "8f6672c5-fa21-42b3-96e2-0d132553f1b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 147,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}